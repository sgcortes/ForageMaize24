{"cells":[{"cell_type":"markdown","metadata":{"id":"XszRNkKqdJqE"},"source":["## Random Forest Regressor. _**SELECTABLE**_"]},{"cell_type":"markdown","metadata":{"id":"m5jkYaUCFpu_"},"source":["## 1.Data read"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CSEeNKxZTc_m"},"outputs":[],"source":["%reset -f"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"elapsed":34344,"status":"ok","timestamp":1727197122944,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"_K4F-DWY13Lf","outputId":"b58a4390-662c-41a1-8419-64b1bbd119c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Primeras líneas\n"]},{"output_type":"execute_result","data":{"text/plain":["     Localidad   Año Cultivar  Fechasiembra(dia)  Diascultivo  Altitud (m)  \\\n","0       Barcia  2000     A200                133          130           25   \n","1       Barcia  2001     A200                133          130           25   \n","2       Barcia  2002     A200                133          130           25   \n","3       Barcia  2003     A200                133          130           25   \n","4       Barcia  2004     A200                133          130           25   \n","...        ...   ...      ...                ...          ...          ...   \n","1444    Sarria  2018     G400                167          100          520   \n","1445    Sarria  2019     G400                167          100          520   \n","1446    Sarria  2020     G400                167          100          520   \n","1447    Sarria  2021     G400                167          100          520   \n","1448    Sarria  2022     G400                167          100          520   \n","\n","      CRAD(mm)  C(%)   pH  Tmax(ºC)  Tmin(ºC)  Radiación(MJ/m2)  \\\n","0           90   1.9  5.2      22.2      15.1            2704.0   \n","1           90   1.9  5.2      22.0      14.2            2665.0   \n","2           90   1.9  5.2      20.6      13.9            2288.0   \n","3           90   1.9  5.2      22.5      15.7            2444.0   \n","4           90   1.9  5.2      21.6      14.8            2496.0   \n","...        ...   ...  ...       ...       ...               ...   \n","1444        88   2.5  6.1      27.9      13.5            1850.0   \n","1445        88   2.5  6.1      27.4      12.1            1800.0   \n","1446        88   2.5  6.1      28.0      12.3            1950.0   \n","1447        88   2.5  6.1      25.7      11.6            1700.0   \n","1448        88   2.5  6.1      28.2      13.0            1810.0   \n","\n","      Precipitacion(mm)  kg MS/ha  kg PB/ha    UFL/ha  Fechafloracion(dia)  \\\n","0                 120.5     17924   1068.75  15184.72                  210   \n","1                 163.0     17906   1181.25  16293.34                  203   \n","2                 384.7     18274   1168.75  15522.69                  214   \n","3                 167.1     19405   1256.25  17450.65                  203   \n","4                 165.9     20641   1350.00  16490.48                  207   \n","...                 ...       ...       ...       ...                  ...   \n","1444              152.4     18509   1143.75  16305.39                  231   \n","1445               95.6     15715   1175.00  13253.09                  235   \n","1446               93.4     17228   1131.25  14948.23                  229   \n","1447              126.8     13138   1225.00  10302.61                  243   \n","1448              136.0     16630   1375.00  13528.30                  237   \n","\n","      Fecharecoleccion(dia)  \n","0                       263  \n","1                       263  \n","2                       263  \n","3                       263  \n","4                       263  \n","...                     ...  \n","1444                    267  \n","1445                    267  \n","1446                    267  \n","1447                    267  \n","1448                    267  \n","\n","[1449 rows x 18 columns]"],"text/html":["\n","  <div id=\"df-9dc0e76c-e158-4a46-a75c-3cf99193c64a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Localidad</th>\n","      <th>Año</th>\n","      <th>Cultivar</th>\n","      <th>Fechasiembra(dia)</th>\n","      <th>Diascultivo</th>\n","      <th>Altitud (m)</th>\n","      <th>CRAD(mm)</th>\n","      <th>C(%)</th>\n","      <th>pH</th>\n","      <th>Tmax(ºC)</th>\n","      <th>Tmin(ºC)</th>\n","      <th>Radiación(MJ/m2)</th>\n","      <th>Precipitacion(mm)</th>\n","      <th>kg MS/ha</th>\n","      <th>kg PB/ha</th>\n","      <th>UFL/ha</th>\n","      <th>Fechafloracion(dia)</th>\n","      <th>Fecharecoleccion(dia)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Barcia</td>\n","      <td>2000</td>\n","      <td>A200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.2</td>\n","      <td>15.1</td>\n","      <td>2704.0</td>\n","      <td>120.5</td>\n","      <td>17924</td>\n","      <td>1068.75</td>\n","      <td>15184.72</td>\n","      <td>210</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Barcia</td>\n","      <td>2001</td>\n","      <td>A200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.0</td>\n","      <td>14.2</td>\n","      <td>2665.0</td>\n","      <td>163.0</td>\n","      <td>17906</td>\n","      <td>1181.25</td>\n","      <td>16293.34</td>\n","      <td>203</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Barcia</td>\n","      <td>2002</td>\n","      <td>A200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>20.6</td>\n","      <td>13.9</td>\n","      <td>2288.0</td>\n","      <td>384.7</td>\n","      <td>18274</td>\n","      <td>1168.75</td>\n","      <td>15522.69</td>\n","      <td>214</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Barcia</td>\n","      <td>2003</td>\n","      <td>A200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.5</td>\n","      <td>15.7</td>\n","      <td>2444.0</td>\n","      <td>167.1</td>\n","      <td>19405</td>\n","      <td>1256.25</td>\n","      <td>17450.65</td>\n","      <td>203</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Barcia</td>\n","      <td>2004</td>\n","      <td>A200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>21.6</td>\n","      <td>14.8</td>\n","      <td>2496.0</td>\n","      <td>165.9</td>\n","      <td>20641</td>\n","      <td>1350.00</td>\n","      <td>16490.48</td>\n","      <td>207</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1444</th>\n","      <td>Sarria</td>\n","      <td>2018</td>\n","      <td>G400</td>\n","      <td>167</td>\n","      <td>100</td>\n","      <td>520</td>\n","      <td>88</td>\n","      <td>2.5</td>\n","      <td>6.1</td>\n","      <td>27.9</td>\n","      <td>13.5</td>\n","      <td>1850.0</td>\n","      <td>152.4</td>\n","      <td>18509</td>\n","      <td>1143.75</td>\n","      <td>16305.39</td>\n","      <td>231</td>\n","      <td>267</td>\n","    </tr>\n","    <tr>\n","      <th>1445</th>\n","      <td>Sarria</td>\n","      <td>2019</td>\n","      <td>G400</td>\n","      <td>167</td>\n","      <td>100</td>\n","      <td>520</td>\n","      <td>88</td>\n","      <td>2.5</td>\n","      <td>6.1</td>\n","      <td>27.4</td>\n","      <td>12.1</td>\n","      <td>1800.0</td>\n","      <td>95.6</td>\n","      <td>15715</td>\n","      <td>1175.00</td>\n","      <td>13253.09</td>\n","      <td>235</td>\n","      <td>267</td>\n","    </tr>\n","    <tr>\n","      <th>1446</th>\n","      <td>Sarria</td>\n","      <td>2020</td>\n","      <td>G400</td>\n","      <td>167</td>\n","      <td>100</td>\n","      <td>520</td>\n","      <td>88</td>\n","      <td>2.5</td>\n","      <td>6.1</td>\n","      <td>28.0</td>\n","      <td>12.3</td>\n","      <td>1950.0</td>\n","      <td>93.4</td>\n","      <td>17228</td>\n","      <td>1131.25</td>\n","      <td>14948.23</td>\n","      <td>229</td>\n","      <td>267</td>\n","    </tr>\n","    <tr>\n","      <th>1447</th>\n","      <td>Sarria</td>\n","      <td>2021</td>\n","      <td>G400</td>\n","      <td>167</td>\n","      <td>100</td>\n","      <td>520</td>\n","      <td>88</td>\n","      <td>2.5</td>\n","      <td>6.1</td>\n","      <td>25.7</td>\n","      <td>11.6</td>\n","      <td>1700.0</td>\n","      <td>126.8</td>\n","      <td>13138</td>\n","      <td>1225.00</td>\n","      <td>10302.61</td>\n","      <td>243</td>\n","      <td>267</td>\n","    </tr>\n","    <tr>\n","      <th>1448</th>\n","      <td>Sarria</td>\n","      <td>2022</td>\n","      <td>G400</td>\n","      <td>167</td>\n","      <td>100</td>\n","      <td>520</td>\n","      <td>88</td>\n","      <td>2.5</td>\n","      <td>6.1</td>\n","      <td>28.2</td>\n","      <td>13.0</td>\n","      <td>1810.0</td>\n","      <td>136.0</td>\n","      <td>16630</td>\n","      <td>1375.00</td>\n","      <td>13528.30</td>\n","      <td>237</td>\n","      <td>267</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1449 rows × 18 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dc0e76c-e158-4a46-a75c-3cf99193c64a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9dc0e76c-e158-4a46-a75c-3cf99193c64a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9dc0e76c-e158-4a46-a75c-3cf99193c64a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f3b202c6-4e23-43d1-bd1e-afdbb70f2e5f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3b202c6-4e23-43d1-bd1e-afdbb70f2e5f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f3b202c6-4e23-43d1-bd1e-afdbb70f2e5f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_039a5504-f4a1-43c4-b81a-4782533b83a2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_039a5504-f4a1-43c4-b81a-4782533b83a2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1449,\n  \"fields\": [\n    {\n      \"column\": \"Localidad\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Barcia\",\n          \"Villaviciosa\",\n          \"Deza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2000,\n        \"max\": 2022,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2015,\n          2009,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cultivar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"A200\",\n          \"A300\",\n          \"G400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechasiembra(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 133,\n        \"max\": 167,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          136,\n          167,\n          133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diascultivo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 83,\n        \"max\": 154,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          130,\n          134,\n          131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Altitud (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194,\n        \"min\": 10,\n        \"max\": 520,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          25,\n          10,\n          400\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CRAD(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 72,\n        \"max\": 112,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          90,\n          96,\n          88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2044904145083357,\n        \"min\": 1.0,\n        \"max\": 4.6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.9,\n          2.2,\n          4.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5184176946028635,\n        \"min\": 5.2,\n        \"max\": 7.1,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5.2,\n          6.0,\n          6.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmax(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0333614070248776,\n        \"min\": 19.5,\n        \"max\": 29.8,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          19.6,\n          25.8,\n          28.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmin(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.131797239297395,\n        \"min\": 8.6,\n        \"max\": 18.1,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          10.7,\n          15.8,\n          10.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Radiaci\\u00f3n(MJ/m2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 382.17356275362715,\n        \"min\": 979.4000000000001,\n        \"max\": 3091.6000000000004,\n        \"num_unique_values\": 713,\n        \"samples\": [\n          2109.1000000000004,\n          1692.9,\n          2910.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precipitacion(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.00998660591209,\n        \"min\": 25.4,\n        \"max\": 495.2,\n        \"num_unique_values\": 1016,\n        \"samples\": [\n          293.4,\n          344.3,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg MS/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3520,\n        \"min\": 5406,\n        \"max\": 27607,\n        \"num_unique_values\": 1365,\n        \"samples\": [\n          15361,\n          12093,\n          16837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg PB/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 243.0417098736007,\n        \"min\": 212.5,\n        \"max\": 1818.75,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          1418.75,\n          1531.25,\n          1300.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UFL/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3215.7683448051857,\n        \"min\": 4560.55,\n        \"max\": 24317.100000000002,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          13043.93,\n          10442.52,\n          18273.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechafloracion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 193,\n        \"max\": 259,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          252,\n          244,\n          210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fecharecoleccion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 250,\n        \"max\": 287,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          267,\n          262,\n          287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","from google.colab import drive\n","drive.mount('/content/drive')\n","dataset_name = \"/content/drive/MyDrive/Colab Notebooks/2024_MAIZ/Datosmodelomaiztotal26-3-24.xlsx\"\n","#/content/drive/MyDrive/Colab Notebooks/2024_MAIZ/DatosmodelomaizAnalisisSilveriofinalsueloV3.xlsx\"\n","\n","# Leer archivo Excel con pandas\n","df = pd.read_excel(dataset_name)\n","# df = pd.read_excel(dataset_name, engine='openpyxl')\n","print('Primeras líneas')\n","#df.head()\n","df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1727197122944,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"IIQr9YgfHSzJ","outputId":"5e773699-fdd7-42e8-f367-9b6ca79953b0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Estadísticos básicos\n"]},{"output_type":"execute_result","data":{"text/plain":["              Año  Fechasiembra(dia)  Diascultivo  Altitud (m)     CRAD(mm)  \\\n","count  1449.00000        1449.000000  1449.000000  1449.000000  1449.000000   \n","mean   2011.00000         150.904762   114.190476   192.571429    96.857143   \n","std       6.63554          13.213160    17.218763   194.962025    13.730924   \n","min    2000.00000         133.000000    83.000000    10.000000    72.000000   \n","25%    2005.00000         136.000000   100.000000    25.000000    88.000000   \n","50%    2011.00000         151.000000   114.000000    50.000000    96.000000   \n","75%    2017.00000         167.000000   130.000000   400.000000   110.000000   \n","max    2022.00000         167.000000   154.000000   520.000000   112.000000   \n","\n","              C(%)           pH     Tmax(ºC)     Tmin(ºC)  Radiación(MJ/m2)  \\\n","count  1449.000000  1449.000000  1449.000000  1449.000000       1449.000000   \n","mean      2.814286     6.100000    23.723188    13.782816       2192.628847   \n","std       1.204490     0.518418     2.033361     2.131797        382.173563   \n","min       1.000000     5.200000    19.500000     8.600000        979.400000   \n","25%       1.900000     5.900000    22.100000    12.600000       1920.000000   \n","50%       2.500000     6.100000    23.400000    14.200000       2195.200000   \n","75%       4.300000     6.200000    25.200000    15.300000       2492.400000   \n","max       4.600000     7.100000    29.800000    18.100000       3091.600000   \n","\n","       Precipitacion(mm)      kg MS/ha     kg PB/ha        UFL/ha  \\\n","count        1449.000000   1449.000000  1449.000000   1449.000000   \n","mean          172.023602  17526.637681  1110.502933  15372.512139   \n","std            73.009987   3520.662929   243.041710   3215.768345   \n","min            25.400000   5406.000000   212.500000   4560.550000   \n","25%           121.000000  15290.000000   943.750000  13274.910000   \n","50%           161.600000  17687.000000  1112.500000  15722.270000   \n","75%           212.700000  19923.000000  1293.750000  17541.190000   \n","max           495.200000  27607.000000  1818.750000  24317.100000   \n","\n","       Fechafloracion(dia)  Fecharecoleccion(dia)  \n","count          1449.000000            1449.000000  \n","mean            223.512767             265.095238  \n","std              12.851790              10.755920  \n","min             193.000000             250.000000  \n","25%             215.000000             262.000000  \n","50%             224.000000             263.000000  \n","75%             232.000000             267.000000  \n","max             259.000000             287.000000  "],"text/html":["\n","  <div id=\"df-396c9d42-a04a-4a3b-9097-47c8f4f38ac8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Año</th>\n","      <th>Fechasiembra(dia)</th>\n","      <th>Diascultivo</th>\n","      <th>Altitud (m)</th>\n","      <th>CRAD(mm)</th>\n","      <th>C(%)</th>\n","      <th>pH</th>\n","      <th>Tmax(ºC)</th>\n","      <th>Tmin(ºC)</th>\n","      <th>Radiación(MJ/m2)</th>\n","      <th>Precipitacion(mm)</th>\n","      <th>kg MS/ha</th>\n","      <th>kg PB/ha</th>\n","      <th>UFL/ha</th>\n","      <th>Fechafloracion(dia)</th>\n","      <th>Fecharecoleccion(dia)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1449.00000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","      <td>1449.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2011.00000</td>\n","      <td>150.904762</td>\n","      <td>114.190476</td>\n","      <td>192.571429</td>\n","      <td>96.857143</td>\n","      <td>2.814286</td>\n","      <td>6.100000</td>\n","      <td>23.723188</td>\n","      <td>13.782816</td>\n","      <td>2192.628847</td>\n","      <td>172.023602</td>\n","      <td>17526.637681</td>\n","      <td>1110.502933</td>\n","      <td>15372.512139</td>\n","      <td>223.512767</td>\n","      <td>265.095238</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.63554</td>\n","      <td>13.213160</td>\n","      <td>17.218763</td>\n","      <td>194.962025</td>\n","      <td>13.730924</td>\n","      <td>1.204490</td>\n","      <td>0.518418</td>\n","      <td>2.033361</td>\n","      <td>2.131797</td>\n","      <td>382.173563</td>\n","      <td>73.009987</td>\n","      <td>3520.662929</td>\n","      <td>243.041710</td>\n","      <td>3215.768345</td>\n","      <td>12.851790</td>\n","      <td>10.755920</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2000.00000</td>\n","      <td>133.000000</td>\n","      <td>83.000000</td>\n","      <td>10.000000</td>\n","      <td>72.000000</td>\n","      <td>1.000000</td>\n","      <td>5.200000</td>\n","      <td>19.500000</td>\n","      <td>8.600000</td>\n","      <td>979.400000</td>\n","      <td>25.400000</td>\n","      <td>5406.000000</td>\n","      <td>212.500000</td>\n","      <td>4560.550000</td>\n","      <td>193.000000</td>\n","      <td>250.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2005.00000</td>\n","      <td>136.000000</td>\n","      <td>100.000000</td>\n","      <td>25.000000</td>\n","      <td>88.000000</td>\n","      <td>1.900000</td>\n","      <td>5.900000</td>\n","      <td>22.100000</td>\n","      <td>12.600000</td>\n","      <td>1920.000000</td>\n","      <td>121.000000</td>\n","      <td>15290.000000</td>\n","      <td>943.750000</td>\n","      <td>13274.910000</td>\n","      <td>215.000000</td>\n","      <td>262.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2011.00000</td>\n","      <td>151.000000</td>\n","      <td>114.000000</td>\n","      <td>50.000000</td>\n","      <td>96.000000</td>\n","      <td>2.500000</td>\n","      <td>6.100000</td>\n","      <td>23.400000</td>\n","      <td>14.200000</td>\n","      <td>2195.200000</td>\n","      <td>161.600000</td>\n","      <td>17687.000000</td>\n","      <td>1112.500000</td>\n","      <td>15722.270000</td>\n","      <td>224.000000</td>\n","      <td>263.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2017.00000</td>\n","      <td>167.000000</td>\n","      <td>130.000000</td>\n","      <td>400.000000</td>\n","      <td>110.000000</td>\n","      <td>4.300000</td>\n","      <td>6.200000</td>\n","      <td>25.200000</td>\n","      <td>15.300000</td>\n","      <td>2492.400000</td>\n","      <td>212.700000</td>\n","      <td>19923.000000</td>\n","      <td>1293.750000</td>\n","      <td>17541.190000</td>\n","      <td>232.000000</td>\n","      <td>267.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2022.00000</td>\n","      <td>167.000000</td>\n","      <td>154.000000</td>\n","      <td>520.000000</td>\n","      <td>112.000000</td>\n","      <td>4.600000</td>\n","      <td>7.100000</td>\n","      <td>29.800000</td>\n","      <td>18.100000</td>\n","      <td>3091.600000</td>\n","      <td>495.200000</td>\n","      <td>27607.000000</td>\n","      <td>1818.750000</td>\n","      <td>24317.100000</td>\n","      <td>259.000000</td>\n","      <td>287.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-396c9d42-a04a-4a3b-9097-47c8f4f38ac8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-396c9d42-a04a-4a3b-9097-47c8f4f38ac8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-396c9d42-a04a-4a3b-9097-47c8f4f38ac8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7a21b21c-011a-453c-be99-b8456108ad0d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a21b21c-011a-453c-be99-b8456108ad0d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7a21b21c-011a-453c-be99-b8456108ad0d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 708.1521801664232,\n        \"min\": 6.6355396721240005,\n        \"max\": 2022.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1449.0,\n          2011.0,\n          2017.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechasiembra(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 468.57015445087353,\n        \"min\": 13.213160429059831,\n        \"max\": 1449.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1449.0,\n          150.9047619047619,\n          151.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diascultivo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 478.0132564410015,\n        \"min\": 17.218762824672176,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          114.19047619047619,\n          114.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Altitud (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 477.9466348449394,\n        \"min\": 10.0,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          192.57142857142858,\n          50.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CRAD(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 483.5860394748623,\n        \"min\": 13.730924200510243,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          96.85714285714286,\n          96.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 511.375293016465,\n        \"min\": 1.0,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.814285714285714,\n          2.5,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 510.42809691340983,\n        \"min\": 0.5184176946028635,\n        \"max\": 1449.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1449.0,\n          6.1,\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmax(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 505.0037012000699,\n        \"min\": 2.0333614070248776,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.723188405797103,\n          23.4,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmin(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 508.04337642605395,\n        \"min\": 2.131797239297395,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.78281573498965,\n          14.2,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Radiaci\\u00f3n(MJ/m2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 867.4902252075527,\n        \"min\": 382.17356275362715,\n        \"max\": 3091.6000000000004,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2192.6288474810217,\n          2195.2000000000003,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precipitacion(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 470.32224831125774,\n        \"min\": 25.4,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          172.02360248447206,\n          161.6,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg MS/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9161.385753818855,\n        \"min\": 1449.0,\n        \"max\": 27607.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          17526.63768115942,\n          17687.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg PB/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 557.4421661045185,\n        \"min\": 212.5,\n        \"max\": 1818.75,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1110.5029330572809,\n          1112.5,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UFL/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8045.092999969435,\n        \"min\": 1449.0,\n        \"max\": 24317.100000000002,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15372.51213940649,\n          15722.27,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechafloracion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 450.1452447309498,\n        \"min\": 12.85179045189777,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          223.5127674258109,\n          224.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fecharecoleccion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 440.48874040787655,\n        \"min\": 10.755920159094897,\n        \"max\": 1449.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          265.0952380952381,\n          263.0,\n          1449.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}],"source":["# @title 1.1 Basic statistics\n","print('Estadísticos básicos')\n","df.describe()"]},{"cell_type":"markdown","metadata":{"id":"TTA0g-psF3cS"},"source":["## 2.Data Preprocessing"]},{"cell_type":"markdown","metadata":{"id":"l6e6ByuU20_1"},"source":["### 2.1 non sigificative variables and calculated variables"]},{"cell_type":"markdown","metadata":{"id":"jAjZ6qZ0OMtL"},"source":["#### 2.1.2 Variable groups\n","Separación de variables en grupos:\n","+ Categóricas (no deben normalizarse porque se codificarán con one-hot): Localidad y Cultivar\n","+ Numéricas (resto) deben normalizarse\n","+ Objetivo: Son las variables a predecir (target). Alguna de ellas como la eficiencia es calculada\n","\n","Reordenar columnas de un dataframe:\n","df = df.iloc[:, [1, 0, 2]];\n","df = df.loc[:, ['B', 'A', 'C']];\n","df = df.reindex(['B', 'A', 'C'], axis=1);"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":293},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1727197122945,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"e5D65sqsTTgx","outputId":"028fb79f-0e0b-40c6-b30e-a7e164ac3b2b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Localidad', 'Cultivar', 'Fechasiembra(dia)', 'Diascultivo',\n","       'Altitud (m)', 'CRAD(mm)', 'C(%)', 'pH', 'Tmax(ºC)', 'Tmin(ºC)',\n","       'Radiación(MJ/m2)', 'Precipitacion(mm)', 'kg MS/ha', 'kg PB/ha',\n","       'UFL/ha', 'Fechafloracion(dia)', 'Fecharecoleccion(dia)'],\n","      dtype='object')\n"]},{"output_type":"execute_result","data":{"text/plain":["  Localidad  Cultivar  Fechasiembra(dia)  Diascultivo  Altitud (m)  CRAD(mm)  \\\n","0    Barcia      1200                133          130           25        90   \n","1    Barcia      1200                133          130           25        90   \n","2    Barcia      1200                133          130           25        90   \n","3    Barcia      1200                133          130           25        90   \n","4    Barcia      1200                133          130           25        90   \n","\n","   C(%)   pH  Tmax(ºC)  Tmin(ºC)  Radiación(MJ/m2)  Precipitacion(mm)  \\\n","0   1.9  5.2      22.2      15.1            2704.0              120.5   \n","1   1.9  5.2      22.0      14.2            2665.0              163.0   \n","2   1.9  5.2      20.6      13.9            2288.0              384.7   \n","3   1.9  5.2      22.5      15.7            2444.0              167.1   \n","4   1.9  5.2      21.6      14.8            2496.0              165.9   \n","\n","   kg MS/ha  kg PB/ha    UFL/ha  Fechafloracion(dia)  Fecharecoleccion(dia)  \n","0     17924   1068.75  15184.72                  210                    263  \n","1     17906   1181.25  16293.34                  203                    263  \n","2     18274   1168.75  15522.69                  214                    263  \n","3     19405   1256.25  17450.65                  203                    263  \n","4     20641   1350.00  16490.48                  207                    263  "],"text/html":["\n","  <div id=\"df-09712f6d-14d2-43b3-b66b-7ff4199ab196\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Localidad</th>\n","      <th>Cultivar</th>\n","      <th>Fechasiembra(dia)</th>\n","      <th>Diascultivo</th>\n","      <th>Altitud (m)</th>\n","      <th>CRAD(mm)</th>\n","      <th>C(%)</th>\n","      <th>pH</th>\n","      <th>Tmax(ºC)</th>\n","      <th>Tmin(ºC)</th>\n","      <th>Radiación(MJ/m2)</th>\n","      <th>Precipitacion(mm)</th>\n","      <th>kg MS/ha</th>\n","      <th>kg PB/ha</th>\n","      <th>UFL/ha</th>\n","      <th>Fechafloracion(dia)</th>\n","      <th>Fecharecoleccion(dia)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Barcia</td>\n","      <td>1200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.2</td>\n","      <td>15.1</td>\n","      <td>2704.0</td>\n","      <td>120.5</td>\n","      <td>17924</td>\n","      <td>1068.75</td>\n","      <td>15184.72</td>\n","      <td>210</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Barcia</td>\n","      <td>1200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.0</td>\n","      <td>14.2</td>\n","      <td>2665.0</td>\n","      <td>163.0</td>\n","      <td>17906</td>\n","      <td>1181.25</td>\n","      <td>16293.34</td>\n","      <td>203</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Barcia</td>\n","      <td>1200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>20.6</td>\n","      <td>13.9</td>\n","      <td>2288.0</td>\n","      <td>384.7</td>\n","      <td>18274</td>\n","      <td>1168.75</td>\n","      <td>15522.69</td>\n","      <td>214</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Barcia</td>\n","      <td>1200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>22.5</td>\n","      <td>15.7</td>\n","      <td>2444.0</td>\n","      <td>167.1</td>\n","      <td>19405</td>\n","      <td>1256.25</td>\n","      <td>17450.65</td>\n","      <td>203</td>\n","      <td>263</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Barcia</td>\n","      <td>1200</td>\n","      <td>133</td>\n","      <td>130</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>1.9</td>\n","      <td>5.2</td>\n","      <td>21.6</td>\n","      <td>14.8</td>\n","      <td>2496.0</td>\n","      <td>165.9</td>\n","      <td>20641</td>\n","      <td>1350.00</td>\n","      <td>16490.48</td>\n","      <td>207</td>\n","      <td>263</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09712f6d-14d2-43b3-b66b-7ff4199ab196')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-09712f6d-14d2-43b3-b66b-7ff4199ab196 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-09712f6d-14d2-43b3-b66b-7ff4199ab196');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-067ed9f4-cfb6-4f20-bc55-0813967cb4b6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-067ed9f4-cfb6-4f20-bc55-0813967cb4b6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-067ed9f4-cfb6-4f20-bc55-0813967cb4b6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_pre","summary":"{\n  \"name\": \"df_pre\",\n  \"rows\": 1449,\n  \"fields\": [\n    {\n      \"column\": \"Localidad\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Barcia\",\n          \"Villaviciosa\",\n          \"Deza\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cultivar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 501,\n        \"min\": 1200,\n        \"max\": 2400,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1200,\n          1300,\n          2400\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechasiembra(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 133,\n        \"max\": 167,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          136,\n          167,\n          133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diascultivo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 83,\n        \"max\": 154,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          130,\n          134,\n          131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Altitud (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194,\n        \"min\": 10,\n        \"max\": 520,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          25,\n          10,\n          400\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CRAD(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 72,\n        \"max\": 112,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          90,\n          96,\n          88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2044904145083357,\n        \"min\": 1.0,\n        \"max\": 4.6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.9,\n          2.2,\n          4.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5184176946028635,\n        \"min\": 5.2,\n        \"max\": 7.1,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5.2,\n          6.0,\n          6.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmax(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0333614070248776,\n        \"min\": 19.5,\n        \"max\": 29.8,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          19.6,\n          25.8,\n          28.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tmin(\\u00baC)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.131797239297395,\n        \"min\": 8.6,\n        \"max\": 18.1,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          10.7,\n          15.8,\n          10.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Radiaci\\u00f3n(MJ/m2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 382.17356275362715,\n        \"min\": 979.4000000000001,\n        \"max\": 3091.6000000000004,\n        \"num_unique_values\": 713,\n        \"samples\": [\n          2109.1000000000004,\n          1692.9,\n          2910.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precipitacion(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.00998660591209,\n        \"min\": 25.4,\n        \"max\": 495.2,\n        \"num_unique_values\": 1016,\n        \"samples\": [\n          293.4,\n          344.3,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg MS/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3520,\n        \"min\": 5406,\n        \"max\": 27607,\n        \"num_unique_values\": 1365,\n        \"samples\": [\n          15361,\n          12093,\n          16837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg PB/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 243.0417098736007,\n        \"min\": 212.5,\n        \"max\": 1818.75,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          1418.75,\n          1531.25,\n          1300.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UFL/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3215.7683448051857,\n        \"min\": 4560.55,\n        \"max\": 24317.100000000002,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          13043.93,\n          10442.52,\n          18273.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechafloracion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 193,\n        \"max\": 259,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          252,\n          244,\n          210\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fecharecoleccion(dia)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 250,\n        \"max\": 287,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          267,\n          262,\n          287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}],"source":["### Eliminacion de columnas del dataframe orginal\n","df_pre = df.copy()\n","df_pre.drop(columns=['Año'], inplace=True)\n","\n","## Adaptación del codigo de los cultivares (Asturias-Galicia)\n","mappingCultivar = {'A200': 1200, 'A300': 1300, 'A400': 1400, 'G200': 2200, 'G300':2300, 'G400': 2400}\n","df_pre['Cultivar'] = df_pre['Cultivar'].map(mappingCultivar)\n","\n","## Crear eficiencia kg MS/ha*dia_cultivo\n","#df_pre['eficMS (kg/ha*dia)'] = df_pre['kg MS/ha']/df_pre['Diascultivo']\n","\n","print(df_pre.columns)\n","df_pre.head()"]},{"cell_type":"markdown","metadata":{"id":"yZ1S2_G43ORO"},"source":["### 2.2 Target variables and descriptor vars separation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1727197122945,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"5CMN39Ap3Mm8","outputId":"19de8ad2-2935-47b9-c3fd-a05f44fcb7f4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['kg MS/ha', 'kg PB/ha', 'UFL/ha'], dtype='object')\n","Columnas descriptoras\n","Index(['Localidad', 'Cultivar', 'Fechasiembra(dia)', 'Diascultivo',\n","       'Altitud (m)', 'CRAD(mm)', 'C(%)', 'pH', 'Tmax(ºC)', 'Tmin(ºC)',\n","       'Radiación(MJ/m2)', 'Precipitacion(mm)', 'Fechafloracion(dia)',\n","       'Fecharecoleccion(dia)'],\n","      dtype='object')\n","Columnas objetivo\n"]},{"output_type":"execute_result","data":{"text/plain":["      kg MS/ha  kg PB/ha    UFL/ha\n","0        17924   1068.75  15184.72\n","1        17906   1181.25  16293.34\n","2        18274   1168.75  15522.69\n","3        19405   1256.25  17450.65\n","4        20641   1350.00  16490.48\n","...        ...       ...       ...\n","1444     18509   1143.75  16305.39\n","1445     15715   1175.00  13253.09\n","1446     17228   1131.25  14948.23\n","1447     13138   1225.00  10302.61\n","1448     16630   1375.00  13528.30\n","\n","[1449 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-b0af130e-beca-40f1-a71b-abe24c31901f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kg MS/ha</th>\n","      <th>kg PB/ha</th>\n","      <th>UFL/ha</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17924</td>\n","      <td>1068.75</td>\n","      <td>15184.72</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17906</td>\n","      <td>1181.25</td>\n","      <td>16293.34</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>18274</td>\n","      <td>1168.75</td>\n","      <td>15522.69</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>19405</td>\n","      <td>1256.25</td>\n","      <td>17450.65</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20641</td>\n","      <td>1350.00</td>\n","      <td>16490.48</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1444</th>\n","      <td>18509</td>\n","      <td>1143.75</td>\n","      <td>16305.39</td>\n","    </tr>\n","    <tr>\n","      <th>1445</th>\n","      <td>15715</td>\n","      <td>1175.00</td>\n","      <td>13253.09</td>\n","    </tr>\n","    <tr>\n","      <th>1446</th>\n","      <td>17228</td>\n","      <td>1131.25</td>\n","      <td>14948.23</td>\n","    </tr>\n","    <tr>\n","      <th>1447</th>\n","      <td>13138</td>\n","      <td>1225.00</td>\n","      <td>10302.61</td>\n","    </tr>\n","    <tr>\n","      <th>1448</th>\n","      <td>16630</td>\n","      <td>1375.00</td>\n","      <td>13528.30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1449 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0af130e-beca-40f1-a71b-abe24c31901f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b0af130e-beca-40f1-a71b-abe24c31901f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b0af130e-beca-40f1-a71b-abe24c31901f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5739b1ee-b6bc-4b46-8475-3786bcfe1571\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5739b1ee-b6bc-4b46-8475-3786bcfe1571')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5739b1ee-b6bc-4b46-8475-3786bcfe1571 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_52bebe3d-ccc1-43d9-9a79-c6768cb58e53\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dftarget')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_52bebe3d-ccc1-43d9-9a79-c6768cb58e53 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dftarget');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dftarget","summary":"{\n  \"name\": \"dftarget\",\n  \"rows\": 1449,\n  \"fields\": [\n    {\n      \"column\": \"kg MS/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3520,\n        \"min\": 5406,\n        \"max\": 27607,\n        \"num_unique_values\": 1365,\n        \"samples\": [\n          15361,\n          12093,\n          16837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kg PB/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 243.0417098736007,\n        \"min\": 212.5,\n        \"max\": 1818.75,\n        \"num_unique_values\": 185,\n        \"samples\": [\n          1418.75,\n          1531.25,\n          1300.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UFL/ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3215.7683448051857,\n        \"min\": 4560.55,\n        \"max\": 24317.100000000002,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          13043.93,\n          10442.52,\n          18273.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["### Columnas Objetivo\n","dftarget = df_pre[['kg MS/ha', 'kg PB/ha', 'UFL/ha']] # copia para tener los ddatos objetivo sin normlaizar\n","print(dftarget.columns)\n","## Eliminación de las columnas objetivo del grupo de descriptoras\n","df_pre.drop(columns=['kg MS/ha', 'kg PB/ha', 'UFL/ha'], inplace=True)\n","df_pre\n","### Columnas descriptoras noramlizadas (pero sin One-Hot)\n","print('Columnas descriptoras')\n","print(df_pre.columns)\n","print('Columnas objetivo')\n","dftarget"]},{"cell_type":"markdown","metadata":{"id":"sTqNKPKmHiyH"},"source":["### 2.3 Normalization"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11154,"status":"ok","timestamp":1727197134091,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"zW78pYXk5M-3","outputId":"8c84f136-c59b-4c72-c183-3b6fb1794fd3"},"outputs":[{"output_type":"stream","name":"stdout","text":["¿Qué tipo de normalización deseas aplicar? (Escribe 'standard' o 'minmax'): standard\n","Datos normalizados con StandardScaler:\n","  Localidad  Cultivar  Fechasiembra(dia)  Diascultivo  Altitud (m)  CRAD(mm)  \\\n","0    Barcia      1200          -1.355538     0.918474    -0.859805 -0.499567   \n","1    Barcia      1200          -1.355538     0.918474    -0.859805 -0.499567   \n","2    Barcia      1200          -1.355538     0.918474    -0.859805 -0.499567   \n","3    Barcia      1200          -1.355538     0.918474    -0.859805 -0.499567   \n","4    Barcia      1200          -1.355538     0.918474    -0.859805 -0.499567   \n","\n","       C(%)        pH  Tmax(ºC)  Tmin(ºC)  Radiación(MJ/m2)  \\\n","0 -0.759326 -1.736651 -0.749357  0.618088          1.338522   \n","1 -0.759326 -1.736651 -0.847751  0.195764          1.236439   \n","2 -0.759326 -1.736651 -1.536503  0.054989          0.249635   \n","3 -0.759326 -1.736651 -0.601767  0.899638          0.657968   \n","4 -0.759326 -1.736651 -1.044537  0.477313          0.794079   \n","\n","   Precipitacion(mm)  Fechafloracion(dia)  Fecharecoleccion(dia)  \n","0          -0.705950            -1.051794              -0.194866  \n","1          -0.123637            -1.596653              -0.194866  \n","2           2.913982            -0.740446              -0.194866  \n","3          -0.067461            -1.596653              -0.194866  \n","4          -0.083902            -1.285305              -0.194866  \n","   kg MS/ha  kg PB/ha    UFL/ha\n","0  0.112905 -0.171853 -0.058417\n","1  0.107790  0.291191  0.286447\n","2  0.212352  0.239741  0.046717\n","3  0.533709  0.599886  0.646457\n","4  0.884901  0.985756  0.347772\n"]}],"source":["tipo_normalizacion = input(\"¿Qué tipo de normalización deseas aplicar? (Escribe 'standard' o 'minmax'): \")\n","\n","if tipo_normalizacion.lower() == 'standard':\n","    # Normalización con StandardScaler\n","    scaler_targ = StandardScaler()\n","    scaler_desc = StandardScaler()\n","    print(\"Datos normalizados con StandardScaler:\")\n","elif tipo_normalizacion.lower() == 'minmax':\n","    # Normalización con MinMaxScaler\n","    scaler_targ = MinMaxScaler()\n","    scaler_desc = MinMaxScaler()\n","    print(\"Datos normalizados con MinMaxScaler:\")\n","else:\n","    print(\"Opción no válida. Por favor, elige 'standard' o 'minmax'.\")\n","\n","# Estandarizacion\n","columnas_desc = df_pre.columns[2:]  # Selecciona las columnas desde la columna 2 en adelante\n","df_pre[columnas_desc] = scaler_desc.fit_transform(df_pre[columnas_desc])\n","\n","# Normalizo todo el dataframe: df_target\n","df_target = scaler_targ.fit_transform(dftarget) # Este comando devuelve un array de numpy por eso es encesario el siguiente comqando\n","df_target = pd.DataFrame(df_target, columns=['kg MS/ha', 'kg PB/ha', 'UFL/ha'])\n","print(df_pre.head())\n","print(df_target.head())\n"]},{"cell_type":"markdown","metadata":{"id":"-jrxsYNfHQ5U"},"source":["## 2.4 One-Hot encoding"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":600},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1727197134091,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"mjkd4PjFHYh2","outputId":"5a2c91f3-c5ad-40cc-c028-cf6ef4eb967d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Fechasiembra(dia)', 'Diascultivo', 'Altitud (m)', 'CRAD(mm)', 'C(%)',\n","       'pH', 'Tmax(ºC)', 'Tmin(ºC)', 'Radiación(MJ/m2)', 'Precipitacion(mm)',\n","       'Fechafloracion(dia)', 'Fecharecoleccion(dia)', 'Localidad_Barcia',\n","       'Localidad_Deza', 'Localidad_Grado', 'Localidad_Ordes',\n","       'Localidad_Ribadeo', 'Localidad_Sarria', 'Localidad_Villaviciosa',\n","       'Cultivar_1200', 'Cultivar_1300', 'Cultivar_1400', 'Cultivar_2200',\n","       'Cultivar_2300', 'Cultivar_2400'],\n","      dtype='object')\n"]},{"output_type":"execute_result","data":{"text/plain":["      Fechasiembra(dia)  Diascultivo  Altitud (m)  CRAD(mm)      C(%)  \\\n","0             -1.355538     0.918474    -0.859805 -0.499567 -0.759326   \n","1             -1.355538     0.918474    -0.859805 -0.499567 -0.759326   \n","2             -1.355538     0.918474    -0.859805 -0.499567 -0.759326   \n","3             -1.355538     0.918474    -0.859805 -0.499567 -0.759326   \n","4             -1.355538     0.918474    -0.859805 -0.499567 -0.759326   \n","...                 ...          ...          ...       ...       ...   \n","1444           1.218542    -0.824413     1.680028 -0.645273 -0.261018   \n","1445           1.218542    -0.824413     1.680028 -0.645273 -0.261018   \n","1446           1.218542    -0.824413     1.680028 -0.645273 -0.261018   \n","1447           1.218542    -0.824413     1.680028 -0.645273 -0.261018   \n","1448           1.218542    -0.824413     1.680028 -0.645273 -0.261018   \n","\n","            pH  Tmax(ºC)  Tmin(ºC)  Radiación(MJ/m2)  Precipitacion(mm)  ...  \\\n","0    -1.736651 -0.749357  0.618088          1.338522          -0.705950  ...   \n","1    -1.736651 -0.847751  0.195764          1.236439          -0.123637  ...   \n","2    -1.736651 -1.536503  0.054989          0.249635           2.913982  ...   \n","3    -1.736651 -0.601767  0.899638          0.657968          -0.067461  ...   \n","4    -1.736651 -1.044537  0.477313          0.794079          -0.083902  ...   \n","...        ...       ...       ...               ...                ...  ...   \n","1444  0.000000  2.054850 -0.132711         -0.896836          -0.268872  ...   \n","1445  0.000000  1.808867 -0.789661         -1.027712          -1.047117  ...   \n","1446  0.000000  2.104047 -0.695811         -0.635085          -1.077260  ...   \n","1447  0.000000  0.972525 -1.024286         -1.289464          -0.619631  ...   \n","1448  0.000000  2.202440 -0.367336         -1.001537          -0.493577  ...   \n","\n","      Localidad_Ordes  Localidad_Ribadeo  Localidad_Sarria  \\\n","0               False              False             False   \n","1               False              False             False   \n","2               False              False             False   \n","3               False              False             False   \n","4               False              False             False   \n","...               ...                ...               ...   \n","1444            False              False              True   \n","1445            False              False              True   \n","1446            False              False              True   \n","1447            False              False              True   \n","1448            False              False              True   \n","\n","      Localidad_Villaviciosa  Cultivar_1200  Cultivar_1300  Cultivar_1400  \\\n","0                      False           True          False          False   \n","1                      False           True          False          False   \n","2                      False           True          False          False   \n","3                      False           True          False          False   \n","4                      False           True          False          False   \n","...                      ...            ...            ...            ...   \n","1444                   False          False          False          False   \n","1445                   False          False          False          False   \n","1446                   False          False          False          False   \n","1447                   False          False          False          False   \n","1448                   False          False          False          False   \n","\n","      Cultivar_2200  Cultivar_2300  Cultivar_2400  \n","0             False          False          False  \n","1             False          False          False  \n","2             False          False          False  \n","3             False          False          False  \n","4             False          False          False  \n","...             ...            ...            ...  \n","1444          False          False           True  \n","1445          False          False           True  \n","1446          False          False           True  \n","1447          False          False           True  \n","1448          False          False           True  \n","\n","[1449 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-06671dee-5cad-4404-aa22-4f6fcb90b9c0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fechasiembra(dia)</th>\n","      <th>Diascultivo</th>\n","      <th>Altitud (m)</th>\n","      <th>CRAD(mm)</th>\n","      <th>C(%)</th>\n","      <th>pH</th>\n","      <th>Tmax(ºC)</th>\n","      <th>Tmin(ºC)</th>\n","      <th>Radiación(MJ/m2)</th>\n","      <th>Precipitacion(mm)</th>\n","      <th>...</th>\n","      <th>Localidad_Ordes</th>\n","      <th>Localidad_Ribadeo</th>\n","      <th>Localidad_Sarria</th>\n","      <th>Localidad_Villaviciosa</th>\n","      <th>Cultivar_1200</th>\n","      <th>Cultivar_1300</th>\n","      <th>Cultivar_1400</th>\n","      <th>Cultivar_2200</th>\n","      <th>Cultivar_2300</th>\n","      <th>Cultivar_2400</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1.355538</td>\n","      <td>0.918474</td>\n","      <td>-0.859805</td>\n","      <td>-0.499567</td>\n","      <td>-0.759326</td>\n","      <td>-1.736651</td>\n","      <td>-0.749357</td>\n","      <td>0.618088</td>\n","      <td>1.338522</td>\n","      <td>-0.705950</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.355538</td>\n","      <td>0.918474</td>\n","      <td>-0.859805</td>\n","      <td>-0.499567</td>\n","      <td>-0.759326</td>\n","      <td>-1.736651</td>\n","      <td>-0.847751</td>\n","      <td>0.195764</td>\n","      <td>1.236439</td>\n","      <td>-0.123637</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-1.355538</td>\n","      <td>0.918474</td>\n","      <td>-0.859805</td>\n","      <td>-0.499567</td>\n","      <td>-0.759326</td>\n","      <td>-1.736651</td>\n","      <td>-1.536503</td>\n","      <td>0.054989</td>\n","      <td>0.249635</td>\n","      <td>2.913982</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-1.355538</td>\n","      <td>0.918474</td>\n","      <td>-0.859805</td>\n","      <td>-0.499567</td>\n","      <td>-0.759326</td>\n","      <td>-1.736651</td>\n","      <td>-0.601767</td>\n","      <td>0.899638</td>\n","      <td>0.657968</td>\n","      <td>-0.067461</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1.355538</td>\n","      <td>0.918474</td>\n","      <td>-0.859805</td>\n","      <td>-0.499567</td>\n","      <td>-0.759326</td>\n","      <td>-1.736651</td>\n","      <td>-1.044537</td>\n","      <td>0.477313</td>\n","      <td>0.794079</td>\n","      <td>-0.083902</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1444</th>\n","      <td>1.218542</td>\n","      <td>-0.824413</td>\n","      <td>1.680028</td>\n","      <td>-0.645273</td>\n","      <td>-0.261018</td>\n","      <td>0.000000</td>\n","      <td>2.054850</td>\n","      <td>-0.132711</td>\n","      <td>-0.896836</td>\n","      <td>-0.268872</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1445</th>\n","      <td>1.218542</td>\n","      <td>-0.824413</td>\n","      <td>1.680028</td>\n","      <td>-0.645273</td>\n","      <td>-0.261018</td>\n","      <td>0.000000</td>\n","      <td>1.808867</td>\n","      <td>-0.789661</td>\n","      <td>-1.027712</td>\n","      <td>-1.047117</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1446</th>\n","      <td>1.218542</td>\n","      <td>-0.824413</td>\n","      <td>1.680028</td>\n","      <td>-0.645273</td>\n","      <td>-0.261018</td>\n","      <td>0.000000</td>\n","      <td>2.104047</td>\n","      <td>-0.695811</td>\n","      <td>-0.635085</td>\n","      <td>-1.077260</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1447</th>\n","      <td>1.218542</td>\n","      <td>-0.824413</td>\n","      <td>1.680028</td>\n","      <td>-0.645273</td>\n","      <td>-0.261018</td>\n","      <td>0.000000</td>\n","      <td>0.972525</td>\n","      <td>-1.024286</td>\n","      <td>-1.289464</td>\n","      <td>-0.619631</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1448</th>\n","      <td>1.218542</td>\n","      <td>-0.824413</td>\n","      <td>1.680028</td>\n","      <td>-0.645273</td>\n","      <td>-0.261018</td>\n","      <td>0.000000</td>\n","      <td>2.202440</td>\n","      <td>-0.367336</td>\n","      <td>-1.001537</td>\n","      <td>-0.493577</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1449 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06671dee-5cad-4404-aa22-4f6fcb90b9c0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-06671dee-5cad-4404-aa22-4f6fcb90b9c0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-06671dee-5cad-4404-aa22-4f6fcb90b9c0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-40cf7b98-54a6-4899-b7ab-98f3bb72b512\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40cf7b98-54a6-4899-b7ab-98f3bb72b512')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-40cf7b98-54a6-4899-b7ab-98f3bb72b512 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9a09b12a-90e0-456c-b607-d5742c97d870\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pre_dum')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9a09b12a-90e0-456c-b607-d5742c97d870 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_pre_dum');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_pre_dum"}},"metadata":{},"execution_count":8}],"source":["## ONE-HOT codification form categorical variables\n","\n","## Codificacion del Cultivar\n","df_pre_dum = pd.get_dummies(df_pre,columns=['Localidad','Cultivar'])\n","print(df_pre_dum.columns)\n","df_pre_dum"]},{"cell_type":"markdown","metadata":{"id":"4zP7Y_nfVWpb"},"source":["### 2.5 Conversion to Numpy Arrays\n","Es mejor seguir trabajando con dataframes de pandas. Por ejemplo una vetnaja es que se devuelven dataframes después del __train_test_split__ y además conservan los índices simplmente haciendo: _test_idx = test_labels.index_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23652,"status":"ok","timestamp":1727197157739,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"7XnWwWyHV2Jy","outputId":"3a27d8ad-688a-4e12-ea79-ff098790dd7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Localidad', 'Cultivar', 'Fechasiembra(dia)', 'Diascultivo', 'Altitud (m)', 'CRAD(mm)', 'C(%)', 'pH', 'Tmax(ºC)', 'Tmin(ºC)', 'Radiación(MJ/m2)', 'Precipitacion(mm)', 'Fechafloracion(dia)', 'Fecharecoleccion(dia)']\n","['kg MS/ha', 'kg PB/ha', 'UFL/ha', 'All']\n","¿Qué variable quiere predecir? (Escribe: 0, 1,2,3): 0\n","kg MS/ha\n"]}],"source":["# Variables a predecir\n","target0 = np.array(df_target['kg MS/ha'])\n","target1 = np.array(df_target['kg PB/ha'])\n","target2 = np.array(df_target['UFL/ha'])\n","target = np.vstack([target0, target1,target2]).T\n","\n","# Eliminar otras variables (opcional)\n","# df_pre = df_pre.drop(['Año','Altitud (m)'], axis=1)\n","\n","# Crear lsita etiquetas var objetivo y descriptoras\n","target_list = list(dftarget)\n","target_list.append('All')\n","\n","feat_list = list(df_pre.columns)\n","print(feat_list)\n","print(target_list)\n","\n","# Features 2 matrices\n","# feats = np.array(df_pre_dum)\n","\n","varObjetivo =int(input(\"¿Qué variable quiere predecir? (Escribe: 0, 1,2,3): \"))\n","print(target_list[varObjetivo])"]},{"cell_type":"markdown","metadata":{"id":"TVlmmbZ2cNbQ"},"source":["## 3.Training and Testing\n"]},{"cell_type":"markdown","metadata":{"id":"DQUM2A9TIie0"},"source":["### 3.1 Separation training-testing sets. **---TARGET---**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1727197157739,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"yHaJxbDQcSln","outputId":"1489d4bd-eb25-4cf6-dfec-644bdf7e38ac"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training Features Shape: (1086, 25)\n","Training Labels Shape: (1086, 1)\n","Testing Features Shape: (363, 25)\n","Testing Labels Shape: (363, 1)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","# Nueva incializacion de las variables test y train opr si se ejecuta varias veces la eleccion de variable objetivo\n","dftarget_selected = pd.DataFrame()\n","train_labels = pd.DataFrame()\n","test_labels = pd.DataFrame()\n","\n","if target_list[varObjetivo]== 'All':\n","  dftarget_selected = df_target.copy()\n","else:\n","  dftarget_selected = df_target[[target_list[varObjetivo]]]\n","\n","# Split the data into training and testing sets\n","train_features, test_features, train_labels, test_labels = train_test_split(df_pre_dum, dftarget_selected, test_size = 0.25)#, random_state = 42)\n","# Obtener los índices de las muestras seleccion\n","# train_features, test_features, train_labels, test_labels = train_test_split(df_pre_dum, df_target, test_size = 0.25, random_state = 42)\n","train_idx = train_labels.index\n","test_idx = test_labels.index\n","\n","# PAra ograr lo anterior es necesario trabajar con dataframes de pandas (no con Numpy arrays)\n","print('Training Features Shape:', train_features.shape)\n","print('Training Labels Shape:', train_labels.shape)\n","print('Testing Features Shape:', test_features.shape)\n","print('Testing Labels Shape:', test_labels.shape)\n"]},{"cell_type":"markdown","metadata":{"id":"4bNuadAQwT_p"},"source":["### 3.2 Training"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8522,"status":"ok","timestamp":1727197166259,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"sSH-qb8EwWO2","outputId":"2b8082f1-d198-4668-b9ed-b87e41034cbf"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return fit_method(estimator, *args, **kwargs)\n"]}],"source":["# Import the model we are using\n","from sklearn.ensemble import RandomForestRegressor\n","# Instantiate model with 1000 decision trees\n","rf = RandomForestRegressor(n_estimators = 1000)#, random_state = 42)\n","# VAriable a predecir en dataframe\n","# Train the model on training data\n","rf.fit(train_features, train_labels);"]},{"cell_type":"markdown","metadata":{"id":"NnZWyGozweqY"},"source":["### 3.3 Test set Predicions\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1727197166259,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"89KRNF_tdpk4","outputId":"17408461-df11-4087-bef8-56e2b9e89272"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'numpy.ndarray'>\n","(363,)\n"]}],"source":["# Use the forest's predict method on the test data\n","predictions = rf.predict(test_features)\n","print(type(predictions))\n","print(predictions.shape)\n","#predictions.reshape(-1,1);"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X3dxev8bdzof"},"outputs":[],"source":["# PREPARACION VECCTORES PARA CLACULO DE ERRORES\n","# errors = abs(pred - test_labels_un_normal)\n","# El vector pred tiene que ser: calculado con el modelo, desnormalizado y aplanado apra pasar al calculo de errores\n","\n","# Vamos con el vector original del valores test (test_labels_un_normal)\n","# Filtramos solo los indices del conjunto test del dataframe df_target\n","# df_Target esta NORMALIZADO. dftarget no lo está\n","\n","test_labels_un_normal = dftarget.iloc[test_idx] # dftarget tiene valores originales sin normalizar\n","\n","if target_list[varObjetivo] != 'All':\n","  test_labels_un_normal = test_labels_un_normal.iloc[:,varObjetivo]\n","else:\n","  test_labels_un_normal = test_labels_un_normal.values.flatten()\n","\n","# Vamos ahora con el vector de predicciones\n","# Sustituimos los valores sin normalizar en el dataset de test\n","test_df = df_target.iloc[test_idx] # Filtro el dataset normalizado con los valores de las variables objetivo de las muestras del conjunto de test\n","# Uso df_target para dar \"formato \" de columnas objetivo igual al dataframe que fue normalziado. Todo esto es para usar la densnomalizacion y poder\n","# elegir entre una variable o 4 agrupadas de forma \"interactiva\"\n","if target_list[varObjetivo] != 'All':\n","  test_df.iloc[:,varObjetivo] = predictions\n","else:\n","  test_df = predictions\n","# aplicamos la trasnformacion inversa (resultado numpy array)\n","pred = scaler_targ.inverse_transform(test_df)\n","\n","# Ahora extraemos solo las columnas que interesan para calcular el error. trabajaremos con arreglos numpy (en lugar dataframe)\n","if target_list[varObjetivo]== 'All':\n","  pred = pred.ravel()\n","else:\n","  pred = pred[:,varObjetivo]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1727197166259,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"c4Do5p4owqEM","outputId":"4ae7beea-2570-40cb-8301-5a1c97310064"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error: 935.24 kg MS/ha\n"]}],"source":["## Calculate the absolute errors\n","errors = abs(pred - test_labels_un_normal)\n","# Print out the mean absolute error (mae)\n","print('Mean Absolute Error:', round(np.mean(errors), 2),target_list[varObjetivo])\n"]},{"cell_type":"markdown","metadata":{"id":"AbAFBOGhxEo9"},"source":["### 3.4 Performance Metrics"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1727197407199,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"JgJrM8d5xIba","outputId":"fcd473a9-9016-4135-875b-8edefa29ee64"},"outputs":[{"output_type":"stream","name":"stdout","text":["MAPE: 5.519519433889269\n","Accuracy: 94.48 %.\n","Mean Absolute Error: 935.2395289256206\n","Mean Squared Error: 1387780.0931527521\n","Root Mean Squared Error: 1178.0407858613182\n","R2 score: 0.8895414038155676\n"]}],"source":["# Calculate mean absolute percentage error (MAPE)\n","mape = 100 * (errors / test_labels_un_normal) # Error medio absoluto procentual .Cuanto menor mejor.\n","print('MAPE:',np.mean(mape))\n","# Calculate and display accuracy\n","accuracy = 100 - np.mean(mape) #\n","print('Accuracy:', round(accuracy, 2), '%.')\n","\n","# Metricas\n","from sklearn import metrics\n","print('Mean Absolute Error:', metrics.mean_absolute_error(test_labels_un_normal, pred))\n","print('Mean Squared Error:', metrics.mean_squared_error(test_labels_un_normal, pred))\n","print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_labels_un_normal, pred)))\n","print('R2 score:', metrics.r2_score(test_labels_un_normal, pred))"]},{"cell_type":"markdown","metadata":{"id":"7iotZKbEQSGe"},"source":["### 3.5  Base Model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1727197166259,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"waTky8GrQVXx","outputId":"dd05a35f-b590-4430-c1b1-40ffc5c78246"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Modelo Base 94.48048056611073\n","{'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 1000, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}\n"]}],"source":["# base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\n","# base_model.fit(train_features, train_labels)\n","# base_accuracy = evaluate(base_model, test_features, test_labels)\n","base_accuracy = accuracy\n","print('Accuracy Modelo Base',base_accuracy)\n","print(rf.get_params())"]},{"cell_type":"markdown","metadata":{"id":"l1VjYRAbl6AQ"},"source":["This accuracy has been calculated only for test set."]},{"cell_type":"markdown","metadata":{"id":"Up7dKsANmDcL"},"source":["# 3.6 Residual figure for test set"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":573,"status":"ok","timestamp":1727197166828,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"O4krHU76mCXE","outputId":"06d156c1-6d46-4985-f305-e4d001d832e2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(7500, 23750, 'MAE: 935.24')"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","fig1, ax1 = plt.subplots()\n","ax1.plot(test_labels_un_normal, pred,'r.')\n","ax1.grid()\n","ax1.set_title('Dry Matter residuals. Test set')\n","ax1.set_xlabel('Dry Matter (kg/ha)')\n","ax1.set_ylabel('Predicted Dry Matter) (kg/ha)')\n","# Draw the zero residual line (origin with slope 1)\n","slope=1\n","x_vals = [min(test_labels_un_normal), max(test_labels_un_normal)]  # Adjust x range if needed\n","y_vals = [slope * x for x in x_vals]  # Calculate y based on slope 1\n","ax1.plot(x_vals, y_vals, color='gray', linestyle='--', label='Zero Residual')\n","R2 = metrics.r2_score(test_labels_un_normal, pred)\n","MAE = metrics.mean_absolute_error(test_labels_un_normal, pred)\n","ax1.text(7500, 25000, f'R^2: {R2:.3f}', color='green', fontsize=10)\n","ax1.text(7500, 22500, f'Accuracy: {accuracy:.2f}', color='green', fontsize=10)\n","ax1.text(7500, 23750, f'MAE: {MAE:.2f}', color='green', fontsize=10)"]},{"cell_type":"markdown","metadata":{"id":"sKvzOFqkfjTn"},"source":["## 4.Hyperparameters\n","- Number of trees\n","- Number of features considered by each tree when splitting a node.\n","Los parámetros del RF son las variables y los umbrales empleados para dividir cada nodo durante el entrenamiento.\n","\n","El ajuste de los hiperparámetros es mas experimental que teórico, lo cual requiere la evaluación del modelo con divefrsos valores de dichos hiperparámetros. Si esto se realiza siempre con el mismo juego de entrenamiento puede llevar al overfitting (sobreajuste).Para evitarlo se emplea la validación cruzada.\n","Un de los métodos de Validación cruzada (CV) es **K-fold**\n","\n","En **K-fold** se divide el dataset en K subsets (folds) y después se entrena el modelo K veces empleando como conjunto de entrenamiento K-1 subsets y evaluando con el subset K-ésimo restante.\n","\n","Al final se _promedia_ el rendimiento de las K validaciones para obtener las métricas de la validación final.\n","\n","En el caso del ajuste de los hiperparámetros se realizan muchas iteraciones con el conjunto completo del K-fold, pero cada una de ellas con diferentes hiperparámetros.\n","Al final se selecciona el mejor y se entrena con el dataset completo. y se evalua con el test dataset.\n","\n","En general a la hora de elegir unos valores de los hiperparámetros nos se tiene una idea muy concreta de estos valores y por ello en principio se debería elegir unos rangos de valores muy amplios para ir ejecutando y probando cada combinación. Pero exsiten algunos métodos como _Randomized Search Cross validation_ que permite definir una malla con los hiperparámetros e ir evaluando en cada combinación de valores.\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1727197166828,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"5lDZSNyxhwcM","outputId":"5f4cae6c-cf90-4aca-e30d-46f34127fac6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Parameters currently in use:\n","\n","{'bootstrap': True,\n"," 'ccp_alpha': 0.0,\n"," 'criterion': 'squared_error',\n"," 'max_depth': None,\n"," 'max_features': 1.0,\n"," 'max_leaf_nodes': None,\n"," 'max_samples': None,\n"," 'min_impurity_decrease': 0.0,\n"," 'min_samples_leaf': 1,\n"," 'min_samples_split': 2,\n"," 'min_weight_fraction_leaf': 0.0,\n"," 'monotonic_cst': None,\n"," 'n_estimators': 100,\n"," 'n_jobs': None,\n"," 'oob_score': False,\n"," 'random_state': None,\n"," 'verbose': 0,\n"," 'warm_start': False}\n"]}],"source":["## Parámetros de Random Forest\n","from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor()#random_state = 42\n","from pprint import pprint\n","# Look at parameters used by our current forest\n","print('Parameters currently in use:\\n')\n","pprint(rf.get_params())"]},{"cell_type":"markdown","metadata":{"id":"HGVYatvFnzL8"},"source":["+ n_estimators = number of trees in the foreset\n","+ max_features = max number of features considered for splitting a node\n","+ max_depth = max number of levels in each decision tree\n","+ min_samples_split = min number of data points placed in a node before the node is split\n","+ min_samples_leaf = min number of data points allowed in a leaf node\n","+ bootstrap = method for sampling data points (with or without replacement)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1727197166828,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"},"user_tz":-120},"id":"J3pEjVMJnxlO","outputId":"03947db6-bc71-4c94-a836-618983deb44a"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'bootstrap': [True, False],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 5, 10],\n"," 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': [True, False],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 5, 10],\n"," 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}"]},"metadata":{},"execution_count":19}],"source":["## Creación del Hyperparameter Grid que se muestreará durante la busqueda aleatoria\n","from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Number of features to consider at every split\n","max_features = ['auto', 'sqrt']\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators,\n","               'max_features': max_features,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","pprint(random_grid)\n","{'bootstrap': [True, False],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 5, 10],\n"," 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}"]},{"cell_type":"markdown","metadata":{"id":"FOIfoUYh8gF5"},"source":["### 4.1 Random Search Training\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":880},"id":"fKC_Mogqovpt","outputId":"f0a3e4eb-4225-462b-f6d0-203a3a1907d8","executionInfo":{"status":"ok","timestamp":1727197398522,"user_tz":-120,"elapsed":231700,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 100 candidates, totalling 300 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:540: FitFailedWarning: \n","165 fits failed out of a total of 300.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","165 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1466, in wrapper\n","    estimator._validate_params()\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 666, in _validate_params\n","    validate_parameter_constraints(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 95, in validate_parameter_constraints\n","    raise InvalidParameterError(\n","sklearn.utils._param_validation.InvalidParameterError: The 'max_features' parameter of RandomForestRegressor must be an int in the range [1, inf), a float in the range (0.0, 1.0], a str among {'sqrt', 'log2'} or None. Got 'auto' instead.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1103: UserWarning: One or more of the test scores are non-finite: [0.83548511 0.83009643 0.83765278 0.8376246  0.82793152 0.83345522\n","        nan 0.82728838        nan 0.82765885        nan        nan\n"," 0.82416452        nan        nan 0.83426246        nan        nan\n","        nan        nan        nan 0.83530887        nan        nan\n","        nan        nan        nan        nan 0.82704586        nan\n"," 0.83677138        nan        nan 0.83041846        nan        nan\n","        nan 0.83576539        nan 0.82570146 0.83609549 0.82230331\n"," 0.84403637 0.82640871 0.81966925        nan 0.8255548         nan\n"," 0.83725551        nan        nan 0.83594856        nan        nan\n"," 0.84302268        nan        nan 0.83712555        nan 0.84167\n"," 0.84398423 0.84362443        nan        nan 0.83716975 0.82777631\n","        nan        nan        nan 0.82293732        nan 0.84440429\n","        nan 0.82005234        nan        nan        nan        nan\n","        nan 0.83155609 0.83708742 0.84306849 0.83506721        nan\n"," 0.82226336        nan        nan        nan 0.8415447         nan\n","        nan 0.83691798        nan 0.82513304        nan 0.84298068\n","        nan        nan 0.84203262 0.84126774]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return fit_method(estimator, *args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["CPU times: user 5.23 s, sys: 361 ms, total: 5.59 s\n","Wall time: 3min 51s\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'max_features': ['auto', 'sqrt'],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   verbose=2)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomizedSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">?<span>Documentation for RandomizedSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: RandomForestRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(bootstrap=False, max_features=&#x27;sqrt&#x27;, n_estimators=800)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(bootstrap=False, max_features=&#x27;sqrt&#x27;, n_estimators=800)</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":20}],"source":["%%time\n","### Inicio del entrenamiento de búsqueda aleatoria\n","# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestRegressor()\n","# Random search of parameters, using 3 fold cross validation,\n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, n_jobs = -1) #random_state=42,\n","#Niter: Numero de modelos que se prueban\n","# N_jobs: -1 (todos los procesadores en paralelo)\n","# cv=3: cross-validation especifica el numero de folds (None por defectro usa 5)\n","# Fit the random search model\n","rf_random.fit(train_features, train_labels)"]},{"cell_type":"markdown","metadata":{"id":"uAGKDB1V752Z"},"source":["En cada iteracion el algorimto tomaraá una combinación diferente de parámetros y no se probaran todas sino solamente un número de combinaciones de parámetros independientes (n_iter:100)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rg0cwBmB8nWh","executionInfo":{"status":"ok","timestamp":1727197398522,"user_tz":-120,"elapsed":12,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"0855fe6c-996d-465e-f08a-311515ee17a4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'n_estimators': 800,\n"," 'min_samples_split': 2,\n"," 'min_samples_leaf': 1,\n"," 'max_features': 'sqrt',\n"," 'max_depth': None,\n"," 'bootstrap': False}"]},"metadata":{},"execution_count":21}],"source":["## MEJOR COMBINACION\n","rf_random.best_params_"]},{"cell_type":"markdown","metadata":{"id":"SuBYwnKu9tH0"},"source":["### 4.2 Evaluate Random Search\n","Comparamos el resutlado de esta combinacion de parámetros con el modelo base para  "]},{"cell_type":"markdown","metadata":{"id":"74ntek88Fx68"},"source":["### Funcion evaluate\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yoQHeCIYF2y6"},"outputs":[],"source":["def evaluate(model, test_features, test_idx, varObjetivo, target_list, scaler_targ, dftarget, df_target):\n","  # Habria que pasar a esta funcion test_features, test_idx, df_target, dftarget, varObjetivo, target_list, scaler_targ\n","  predictions = model.predict(test_features)\n","  #print(target_list[varObjetivo])\n","  # Filtramos solo los indices del conjunto test del dataframe dt_target\n","  test_df = df_target.iloc[test_idx]\n","  test_labels_un_normal = dftarget.iloc[test_idx] # dftarget tiene valores originales sin normalizar\n","\n","  if target_list[varObjetivo] != 'All':\n","    test_labels_un_normal = test_labels_un_normal.iloc[:,varObjetivo]\n","  else:\n","    test_labels_un_normal = test_labels_un_normal.values.flatten()\n","\n","  # Sustituimos los valores sin normalizar en el dataset de test\n","  if target_list[varObjetivo] != 'All':\n","    test_df.iloc[:,varObjetivo] = predictions\n","  else:\n","    test_df = predictions\n","\n","  # aplicamos la trasnformacion inversa (resultado numpy array)\n","  pred = scaler_targ.inverse_transform(test_df)\n","\n","  # Ahora extraemos solo las columnas que interesan para calcular el error. trabajaremos con arreglos numpy (en lugar dataframe)\n","  if target_list[varObjetivo]== 'All':\n","    pred = pred.ravel()\n","  else:\n","    pred = pred[:,varObjetivo]\n","\n","  errors = abs(pred - test_labels_un_normal)\n","  mape = 100 * np.mean(errors / test_labels_un_normal)\n","  accuracy = 100 - mape\n","  # Print out the mean absolute error (mae)\n","  print('Mean Absolute Error:', round(np.mean(errors), 2),target_list[varObjetivo])\n","  print('Accuracy %:', round(accuracy, 2))\n","  print('Mean Absolute Error:', metrics.mean_absolute_error(test_labels_un_normal, pred))\n","  print('Mean Squared Error:', metrics.mean_squared_error(test_labels_un_normal, pred))\n","  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_labels_un_normal, pred)))\n","  print('R2 score:', metrics.r2_score(test_labels_un_normal, pred))\n","  return accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Gv3eaG5H5s2","executionInfo":{"status":"ok","timestamp":1727197398522,"user_tz":-120,"elapsed":8,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"dbe92b30-2816-4856-97ee-36add79af56a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error: 969.31 kg MS/ha\n","Accuracy %: 94.16\n","Mean Absolute Error: 969.3102307162532\n","Mean Squared Error: 1534904.8335440028\n","Root Mean Squared Error: 1238.9127626850902\n","R2 score: 0.8778311967245456\n","Improvement of -0.33%.\n"]}],"source":["model = rf_random.best_estimator_\n","best_random = rf_random.best_estimator_\n","\n","random_accuracy = evaluate(model, test_features, test_idx, varObjetivo, target_list, scaler_targ, dftarget, df_target)\n","\n","print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"]},{"cell_type":"markdown","metadata":{"id":"crEC8xgq_f-R"},"source":["### 4.3 Grid Search con Cross Validation\n","Ahora que hemos realizado una búsqueda aleatoria podemos centrarnos en todas las combinaciones pero en un rango menor de combinaciones de parámetros. Tenemos que crear otra malla de parámetros pero con unos rangos mucho menores esta vez y emplearesmo GridSearch en lugar de _RandomizedSearchCV_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"IbGYIt9r_-FY","executionInfo":{"status":"ok","timestamp":1727197398522,"user_tz":-120,"elapsed":7,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"6f6a74e7-355b-444f-f361-e615b08b4efb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nparam_grid = {\\n    'bootstrap': [True],\\n    'max_depth': [ 40, 45, 50, 55, 60],\\n    'max_features': ['sqrt'],\\n    'min_samples_leaf': [1],\\n    'min_samples_split': [4,5, 6],\\n    'n_estimators': [150, 200, 250]\\n}\\n\\n{'n_estimators': 200,\\n 'min_samples_split': 2,\\n 'min_samples_leaf': 1,\\n 'max_features': 'sqrt',\\n 'max_depth': 50,\\n 'bootstrap': True}\\n-----------------\\n{'n_estimators': 1400,\\n 'min_samples_split': 5,\\n 'min_samples_leaf': 1,\\n 'max_features': 'sqrt',\\n 'max_depth': 80,\\n 'bootstrap': False}\\n\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":24}],"source":["#from _typeshed import NoneType\n","from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search\n","b= rf_random.best_params_['n_estimators']\n","nest = [b-100,b-50,b,b+50,b+100]\n","c = rf_random.best_params_['min_samples_split']\n","minsplit = [c-2,c-1,c,c+1,c+2]\n","maxfeat = rf_random.best_params_['max_features']\n","d = rf_random.best_params_['max_depth']\n","if type(d) is None:\n","  maxdepth = [d-10, d-5, d, d+5,d+10]\n","else:\n","  maxdepth = ['None']\n","\n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [rf_random.best_params_['max_depth']],\n","    'max_features': ['sqrt','auto'],\n","    'min_samples_leaf': [rf_random.best_params_['min_samples_leaf']],\n","    'min_samples_split': [rf_random.best_params_['min_samples_split']],\n","    'n_estimators': [rf_random.best_params_['n_estimators']]\n","}\n","'''\n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [ 40, 45, 50, 55, 60],\n","    'max_features': ['sqrt'],\n","    'min_samples_leaf': [1],\n","    'min_samples_split': [4,5, 6],\n","    'n_estimators': [150, 200, 250]\n","}\n","\n","{'n_estimators': 200,\n"," 'min_samples_split': 2,\n"," 'min_samples_leaf': 1,\n"," 'max_features': 'sqrt',\n"," 'max_depth': 50,\n"," 'bootstrap': True}\n","-----------------\n","{'n_estimators': 1400,\n"," 'min_samples_split': 5,\n"," 'min_samples_leaf': 1,\n"," 'max_features': 'sqrt',\n"," 'max_depth': 80,\n"," 'bootstrap': False}\n","\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H2gHDZQaGlYT"},"outputs":[],"source":["# Create a based model\n","rf = RandomForestRegressor()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf, param_grid = param_grid,\n","                          cv = 3, n_jobs = -1, verbose = 2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2thYU8uSAYQw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727197405685,"user_tz":-120,"elapsed":7169,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"a10e2d88-8f83-44df-f1ac-d15a30f501b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 2 candidates, totalling 6 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:540: FitFailedWarning: \n","3 fits failed out of a total of 6.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","3 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1466, in wrapper\n","    estimator._validate_params()\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 666, in _validate_params\n","    validate_parameter_constraints(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 95, in validate_parameter_constraints\n","    raise InvalidParameterError(\n","sklearn.utils._param_validation.InvalidParameterError: The 'max_features' parameter of RandomForestRegressor must be an int in the range [1, inf), a float in the range (0.0, 1.0], a str among {'sqrt', 'log2'} or None. Got 'auto' instead.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1103: UserWarning: One or more of the test scores are non-finite: [0.83999864        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return fit_method(estimator, *args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["{'bootstrap': True,\n"," 'max_depth': None,\n"," 'max_features': 'sqrt',\n"," 'min_samples_leaf': 1,\n"," 'min_samples_split': 2,\n"," 'n_estimators': 800}\n","CPU times: user 2.1 s, sys: 61.6 ms, total: 2.16 s\n","Wall time: 6.97 s\n"]}],"source":["%%time\n","# Fit the grid search to the data\n","grid_search.fit(train_features, train_labels)\n","pprint(grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fNq3W7c9QaCf","executionInfo":{"status":"ok","timestamp":1727197405685,"user_tz":-120,"elapsed":8,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"2ba774a4-fa6c-4868-d1e5-f48f63187d5a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error: 973.99 kg MS/ha\n","Accuracy %: 94.11\n","Mean Absolute Error: 973.9906611570251\n","Mean Squared Error: 1547775.3331350377\n","Root Mean Squared Error: 1244.0961912710118\n","R2 score: 0.876806785635186\n","Improvement of -0.40%.\n"]}],"source":["best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, test_features, test_idx, varObjetivo, target_list, scaler_targ, dftarget, df_target)\n","predictions = best_grid.predict(test_features)\n","print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oSqhbrHIBd2j","executionInfo":{"status":"ok","timestamp":1727197405685,"user_tz":-120,"elapsed":4,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"98479a05-fd65-4901-bee1-e61847c23e41"},"outputs":[{"output_type":"stream","name":"stdout","text":["Variable: Tmax(ºC)             Importance: 0.31\n","Variable: Cultivar             Importance: 0.16\n","Variable: Radiación(MJ/m2)     Importance: 0.07\n","Variable: Localidad            Importance: 0.06\n","Variable: Precipitacion(mm)    Importance: 0.06\n","Variable: C(%)                 Importance: 0.05\n","Variable: pH                   Importance: 0.05\n","Variable: Tmin(ºC)             Importance: 0.05\n","Variable: Fechasiembra(dia)    Importance: 0.02\n","Variable: Altitud (m)          Importance: 0.02\n","Variable: Diascultivo          Importance: 0.01\n","Variable: CRAD(mm)             Importance: 0.01\n","Variable: Fechafloracion(dia)  Importance: 0.0\n","Variable: Fecharecoleccion(dia) Importance: 0.0\n"]}],"source":["# Get numerical feature importances\n","importances = list(best_grid.feature_importances_)\n","# List of tuples with variable and importance\n","feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feat_list, importances)]\n","# Sort the feature importances by most important first\n","feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n","# Print out the feature and importances\n","[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];"]},{"cell_type":"markdown","metadata":{"id":"vqIq-6j4hit-"},"source":["## Variable Importance Figure"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kPE8i4NVhplc","colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"status":"ok","timestamp":1727197406725,"user_tz":-120,"elapsed":1042,"user":{"displayName":"Silverio Garcia Cortes","userId":"06203131915881478662"}},"outputId":"37b4fe8d-4718-4f78-9034-605836d4a3f0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Extract feature names and importance values\n","features = [x[0] for x in feature_importances]  # Feature names\n","importances = [x[1] for x in feature_importances]  # Importance values\n","features_eng = ['Tmax(ºC)','Cultivar','PH','C(%)','Tmin(ºC)','Radiation(MJ/m2)','Growing season','Elevation(m)','Precipitation (mm)','Site','Sowing date','WHC (mm)','Anthesis date','Harvest date']\n","# Create the figure and axes\n","plt.figure(figsize=(8, 6))  # Adjust figure size as needed\n","ax = plt.axes()\n","\n","# Create the horizontal bar chart\n","ax.barh(features_eng, importances, color='skyblue')  # Adjust bar color if desired\n","\n","# Set labels and title\n","ax.set_xlabel('Importance')\n","ax.set_ylabel('Feature Name')\n","ax.set_title('Feature Importances')\n","\n","# Set y-axis ticks (feature names)\n","ax.set_yticks(features_eng)  # Set tick positions at feature names\n","\n","# Optional: Add gridlines\n","ax.grid(axis='x', linestyle='--', alpha=0.6)\n","\n","# Optional: Rotate feature names for better readability (if many features)\n","plt.xticks(rotation=45)  # Rotate x-axis labels by 45 degrees\n","\n","# Show the plot\n","plt.tight_layout()  # Adjust layout to prevent overlapping elements\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1R8Bq0ABpBewQhCFzYlcHjDW_vIM6-4ZV","timestamp":1737287641429},{"file_id":"12mC3BQW5vwKQp2wYP0Zlmx-4VQWE9ybt","timestamp":1720193926108},{"file_id":"1Yo4Egpf8vApGAIBcvtMEZ1JJxX3tNb1D","timestamp":1720193381479},{"file_id":"1oEq0H4p47_y0FDeS0cb4vWfeC-IUJVLJ","timestamp":1719830832379},{"file_id":"1sdGg0WM_h-OY41p0WKP6uk3j_XzV8CIM","timestamp":1709198770903},{"file_id":"1cRM98OmFewfXyiRl8ew_JcG4zdhOxYMh","timestamp":1709116702156},{"file_id":"1EXfdEjXkWB2mcD6E-db7fTHyR506h-wL","timestamp":1709052847039},{"file_id":"1G-51O0pGDdi3Tj_WG2mywI6_SgK9hiBx","timestamp":1708605823575},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1708166223871}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}